name: sf-engineering
run-name: ${{ github.actor }} is learning GitHub Actions

# Event: main branch가 merge 될 때 Actions 작동
on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      db: 
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.RDS_DATABASE_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.RDS_DB_NAME }}
          MYSQL_USER: ${{ secrets.RDS_DATABASE_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.RDS_DATABASE_PASSWORD }}
    steps:
      # chekcout action의 3 버전을 Actions으로써 실행
      - name: Checkout Code
        uses: actions/checkout@v3

      # MySQL 구성까지 기다리기
      - name: Wait for MySQL to be ready
        run: sleep 30
      
      # 데이터베이스 테이블 구성(초기 구성)
      - name: Initialize Database Schema
        run: |
          mysql -h 127.0.0.1 -P 3306 -u ${{ secrets.RDS_DATABASE_USERNAME }} -p${{ secrets.RDS_DATABASE_PASSWORD }} ${{ secrets.RDS_DB_NAME }} < init/schema.sql
      
      # Python 환경 구성
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      # 의존성 설치
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 환경변수 확인
      - name: Debug Environment Variables
        run: |
          echo "DB_URL=$DB_URL"
          echo "RDS_DATABASE_USERNAME=$RDS_DATABASE_USERNAME"
          echo "RDS_DATABASE_PASSWORD=$RDS_DATABASE_PASSWORD"
          echo "RDS_DB_NAME=$RDS_DB_NAME"
          echo "RDS_DATABASE_ENDPOINT=$RDS_DATABASE_ENDPOINT"
          echo "RDS_PORT=$RDS_PORT"
        env:
          DB_URL: mysql+pymysql://${{ secrets.RDS_DATABASE_USERNAME }}:${{ secrets.RDS_DATABASE_PASSWORD }}@127.0.0.1:3306/${{ secrets.RDS_DB_NAME }}?charset=utf8mb4
          RDS_DATABASE_USERNAME: ${{ secrets.RDS_DATABASE_USERNAME }}
          RDS_DATABASE_PASSWORD: ${{ secrets.RDS_DATABASE_PASSWORD }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          RDS_DATABASE_ENDPOINT: ${{ secrets.RDS_DATABASE_ENDPOINT }}
          RDS_PORT: ${{ secrets.RDS_PORT }}
      
      # 테스트 진행
      - name: Run Pytest
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RDS_DATABASE_ENDPOINT: ${{ secrets.RDS_DATABASE_ENDPOINT }}
          RDS_DATABASE_USERNAME: ${{ secrets.RDS_DATABASE_USERNAME }}
          RDS_DATABASE_PASSWORD: ${{ secrets.RDS_DATABASE_PASSWORD }}
          RDS_PORT: ${{ secrets.RDS_PORT }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
        run: pytest test/ci_test.py --disable-warnings

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      # chekcout action의 3 버전을 Actions으로써 실행
      - name: Checkout Code
        uses: actions/checkout@v3

      # Dockerhub 로그인
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker build
      - name: Build Docker Image
        run: docker buildx build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/fastapi_app:latest .

      # Docker push
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/fastapi_app:latest

  deploy:
    name: Deploy on AWS EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      # chekcout action의 3 버전을 Actions으로써 실행
      - name: Checkout Code
        uses: actions/checkout@v3

      # AWS EC2 연결 및 배포
      - name: Connect to AWS EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          # 기존 AWS EC2 서버에서 수행한 명령어 작성
          script: |
            cd sf
            sudo docker stop fastapi
            sudo docker rm fastapi
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/fastapi_app:latest
            sudo docker run -d -p 8000:8000 --name fastapi --env-file .env ${{ secrets.DOCKER_USERNAME }}/fastapi_app:latest
            sudo docker image prune -a -f
